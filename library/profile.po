# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# Zombie110year <zombie110year@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# Alpha Du <alphanow@gmail.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-21 14:44+0800\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: ppcfish <ppcfish@gmail.com>, 2021\n"
"Language: zh_CN\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-"
"doc/teams/5390/zh_CN/)\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/profile.rst:5
msgid "The Python Profilers"
msgstr "Python Profilers 分析器"

#: ../../library/profile.rst:7
msgid "**Source code:** :source:`Lib/profile.py` and :source:`Lib/pstats.py`"
msgstr "**源代码：** :source:`Lib/profile.py` 和 :source:`Lib/pstats.py`"

#: ../../library/profile.rst:14
msgid "Introduction to the profilers"
msgstr "profile分析器简介"

#: ../../library/profile.rst:20
msgid ""
":mod:`cProfile` and :mod:`profile` provide :dfn:`deterministic profiling`"
" of Python programs. A :dfn:`profile` is a set of statistics that "
"describes how often and for how long various parts of the program "
"executed. These statistics can be formatted into reports via the "
":mod:`pstats` module."
msgstr ""
":mod:`cProfile` 和 :mod:`profile` 提供了 Python 程序的 :dfn:`确定性性能分析` 。 "
":dfn:`profile` 是一组统计数据，描述程序的各个部分执行的频率和时间。这些统计数据可以通过 :mod:`pstats` "
"模块格式化为报表。"

#: ../../library/profile.rst:25
msgid ""
"The Python standard library provides two different implementations of the"
" same profiling interface:"
msgstr "Python 标准库提供了同一分析接口的两种不同实现："

#: ../../library/profile.rst:28
msgid ""
":mod:`cProfile` is recommended for most users; it's a C extension with "
"reasonable overhead that makes it suitable for profiling long-running "
"programs.  Based on :mod:`lsprof`, contributed by Brett Rosen and Ted "
"Czotter."
msgstr ""
"对于大多数用户，建议使用 :mod:`cProfile` ；这是一个 C "
"扩展插件，因为其合理的运行开销，所以适合于分析长时间运行的程序。该插件基于 :mod:`lsprof` ，由 Brett Rosen 和 Ted "
"Chaotter 贡献。"

#: ../../library/profile.rst:33
msgid ""
":mod:`profile`, a pure Python module whose interface is imitated by "
":mod:`cProfile`, but which adds significant overhead to profiled "
"programs. If you're trying to extend the profiler in some way, the task "
"might be easier with this module.  Originally designed and written by Jim"
" Roskind."
msgstr ""
":mod:`profile` 是一个纯 Python 模块（:mod:`cProfile` 就是模拟其接口的 C "
"语言实现），但它会显著增加配置程序的开销。如果你正在尝试以某种方式扩展分析器，则使用此模块可能会更容易完成任务。该模块最初由 Jim "
"Roskind  设计和编写。"

#: ../../library/profile.rst:40
msgid ""
"The profiler modules are designed to provide an execution profile for a "
"given program, not for benchmarking purposes (for that, there is "
":mod:`timeit` for reasonably accurate results).  This particularly "
"applies to benchmarking Python code against C code: the profilers "
"introduce overhead for Python code, but not for C-level functions, and so"
" the C code would seem faster than any Python one."
msgstr ""
"profiler 分析器模块被设计为给指定的程序提供执行概要文件，而不是用于基准测试目的（ :mod:`timeit` "
"才是用于此目标的，它能获得合理准确的结果）。这特别适用于将 Python 代码与 C 代码进行基准测试：分析器为Python "
"代码引入开销，但不会为 C级别的函数引入开销，因此 C 代码似乎比任何Python 代码都更快。"

#: ../../library/profile.rst:51
msgid "Instant User's Manual"
msgstr "实时用户手册"

#: ../../library/profile.rst:53
msgid ""
"This section is provided for users that \"don't want to read the "
"manual.\" It provides a very brief overview, and allows a user to rapidly"
" perform profiling on an existing application."
msgstr "本节是为 “不想阅读手册” 的用户提供的。它提供了非常简短的概述，并允许用户快速对现有应用程序执行评测。"

#: ../../library/profile.rst:57
msgid "To profile a function that takes a single argument, you can do::"
msgstr "要分析采用单个参数的函数，可以执行以下操作："

#: ../../library/profile.rst:63
msgid ""
"(Use :mod:`profile` instead of :mod:`cProfile` if the latter is not "
"available on your system.)"
msgstr "（如果 :mod:`cProfile` 在您的系统上不可用，请使用 :mod:`profile` 。）"

#: ../../library/profile.rst:66
msgid ""
"The above action would run :func:`re.compile` and print profile results "
"like the following::"
msgstr "上述操作将运行 :func:`re.compile` 并打印分析结果，如下所示："

#: ../../library/profile.rst:82
msgid ""
"The first line indicates that 197 calls were monitored.  Of those calls, "
"192 were :dfn:`primitive`, meaning that the call was not induced via "
"recursion. The next line: ``Ordered by: standard name``, indicates that "
"the text string in the far right column was used to sort the output. The "
"column headings include:"
msgstr ""
"第一行显示监听了197个调用。在这些调用中，有192个是 :dfn:`原始的` ，这意味着调用不是通过递归引发的。下一行: ``Ordered "
"by: standard name`` ，表示最右边列中的文本字符串用于对输出进行排序。列标题包括："

#: ../../library/profile.rst:88
msgid "ncalls"
msgstr "ncalls"

#: ../../library/profile.rst:88
msgid "for the number of calls."
msgstr "调用次数"

#: ../../library/profile.rst:92
msgid "tottime"
msgstr "tottime"

#: ../../library/profile.rst:91
msgid ""
"for the total time spent in the given function (and excluding time made "
"in calls to sub-functions)"
msgstr "在指定函数中消耗的总时间（不包括调用子函数的时间）"

#: ../../library/profile.rst:95 ../../library/profile.rst:102
msgid "percall"
msgstr "percall"

#: ../../library/profile.rst:95
msgid "is the quotient of ``tottime`` divided by ``ncalls``"
msgstr "是 ``tottime`` 除以 ``ncalls`` 的商"

#: ../../library/profile.rst:99
msgid "cumtime"
msgstr "cumtime"

#: ../../library/profile.rst:98
msgid ""
"is the cumulative time spent in this and all subfunctions (from "
"invocation till exit). This figure is accurate *even* for recursive "
"functions."
msgstr "指定的函数及其所有子函数（从调用到退出）消耗的累积时间。这个数字对于递归函数来说是准确的。"

#: ../../library/profile.rst:102
msgid "is the quotient of ``cumtime`` divided by primitive calls"
msgstr "是 ``cumtime`` 除以原始调用（次数）的商（即：函数运行一次的平均时间）"

#: ../../library/profile.rst:105
msgid "filename:lineno(function)"
msgstr "filename:lineno(function)"

#: ../../library/profile.rst:105
msgid "provides the respective data of each function"
msgstr "提供相应数据的每个函数"

#: ../../library/profile.rst:107
msgid ""
"When there are two numbers in the first column (for example ``3/1``), it "
"means that the function recursed.  The second value is the number of "
"primitive calls and the former is the total number of calls.  Note that "
"when the function does not recurse, these two values are the same, and "
"only the single figure is printed."
msgstr "如果第一列中有两个数字（例如3/1），则表示函数递归。第二个值是原始调用次数，第一个是调用的总次数。请注意，当函数不递归时，这两个值是相同的，并且只打印单个数字。"

#: ../../library/profile.rst:113
msgid ""
"Instead of printing the output at the end of the profile run, you can "
"save the results to a file by specifying a filename to the :func:`run` "
"function::"
msgstr "profile 运行结束时，打印输出不是必须的。也可以通过为 :func:`run` 函数指定文件名，将结果保存到文件中："

#: ../../library/profile.rst:120
msgid ""
"The :class:`pstats.Stats` class reads profile results from a file and "
"formats them in various ways."
msgstr ":class:`pstats.Stats` 类从文件中读取 profile 结果，并以各种方式对其进行格式化。"

#: ../../library/profile.rst:123
msgid ""
"The files :mod:`cProfile` and :mod:`profile` can also be invoked as a "
"script to profile another script.  For example::"
msgstr ":mod:`cProfile` 和 :mod:`profile` 文件也可以作为脚本调用，以分析另一个脚本。例如："

#: ../../library/profile.rst:128
msgid "``-o`` writes the profile results to a file instead of to stdout"
msgstr "``-o`` 将profile 结果写入文件而不是标准输出"

#: ../../library/profile.rst:130
msgid ""
"``-s`` specifies one of the :func:`~pstats.Stats.sort_stats` sort values "
"to sort the output by. This only applies when ``-o`` is not supplied."
msgstr ""
"``-s`` 指定 :func:`~pstats.Stats.sort_stats` 排序值之一以对输出进行排序。这仅适用于未提供 ``-o`` "
"的情况"

#: ../../library/profile.rst:133
msgid "``-m`` specifies that a module is being profiled instead of a script."
msgstr "``-m`` 指定要分析的是模块而不是脚本。"

#: ../../library/profile.rst:135
msgid "Added the ``-m`` option to :mod:`cProfile`."
msgstr ":mod:`cProfile` 添加 ``-m`` 选项"

#: ../../library/profile.rst:138
msgid "Added the ``-m`` option to :mod:`profile`."
msgstr ":mod:`profile` 添加 ``-m`` 选项"

#: ../../library/profile.rst:141
msgid ""
"The :mod:`pstats` module's :class:`~pstats.Stats` class has a variety of "
"methods for manipulating and printing the data saved into a profile "
"results file::"
msgstr ""

#: ../../library/profile.rst:149
msgid ""
"The :meth:`~pstats.Stats.strip_dirs` method removed the extraneous path "
"from all the module names. The :meth:`~pstats.Stats.sort_stats` method "
"sorted all the entries according to the standard module/line/name string "
"that is printed. The :meth:`~pstats.Stats.print_stats` method printed out"
" all the statistics.  You might try the following sort calls::"
msgstr ""

#: ../../library/profile.rst:158
msgid ""
"The first call will actually sort the list by function name, and the "
"second call will print out the statistics.  The following are some "
"interesting calls to experiment with::"
msgstr ""

#: ../../library/profile.rst:164
msgid ""
"This sorts the profile by cumulative time in a function, and then only "
"prints the ten most significant lines.  If you want to understand what "
"algorithms are taking time, the above line is what you would use."
msgstr ""

#: ../../library/profile.rst:168
msgid ""
"If you were looking to see what functions were looping a lot, and taking "
"a lot of time, you would do::"
msgstr ""

#: ../../library/profile.rst:173
msgid ""
"to sort according to time spent within each function, and then print the "
"statistics for the top ten functions."
msgstr ""

#: ../../library/profile.rst:176
msgid "You might also try::"
msgstr "你也可以尝试："

#: ../../library/profile.rst:180
msgid ""
"This will sort all the statistics by file name, and then print out "
"statistics for only the class init methods (since they are spelled with "
"``__init__`` in them).  As one final example, you could try::"
msgstr ""

#: ../../library/profile.rst:186
msgid ""
"This line sorts statistics with a primary key of time, and a secondary "
"key of cumulative time, and then prints out some of the statistics. To be"
" specific, the list is first culled down to 50% (re: ``.5``) of its "
"original size, then only lines containing ``init`` are maintained, and "
"that sub-sub-list is printed."
msgstr ""

#: ../../library/profile.rst:191
msgid ""
"If you wondered what functions called the above functions, you could now "
"(``p`` is still sorted according to the last criteria) do::"
msgstr ""

#: ../../library/profile.rst:196
msgid "and you would get a list of callers for each of the listed functions."
msgstr ""

#: ../../library/profile.rst:198
msgid ""
"If you want more functionality, you're going to have to read the manual, "
"or guess what the following functions do::"
msgstr ""

#: ../../library/profile.rst:204
msgid ""
"Invoked as a script, the :mod:`pstats` module is a statistics browser for"
" reading and examining profile dumps.  It has a simple line-oriented "
"interface (implemented using :mod:`cmd`) and interactive help."
msgstr ""

#: ../../library/profile.rst:209
msgid ":mod:`profile` and :mod:`cProfile` Module Reference"
msgstr ":mod:`profile` 和 :mod:`cProfile` 模块参考"

#: ../../library/profile.rst:215
msgid ""
"Both the :mod:`profile` and :mod:`cProfile` modules provide the following"
" functions:"
msgstr ":mod:`profile` 和 :mod:`cProfile` 模块都提供下列函数："

#: ../../library/profile.rst:220
msgid ""
"This function takes a single argument that can be passed to the "
":func:`exec` function, and an optional file name.  In all cases this "
"routine executes::"
msgstr ""

#: ../../library/profile.rst:225
msgid ""
"and gathers profiling statistics from the execution. If no file name is "
"present, then this function automatically creates a "
":class:`~pstats.Stats` instance and prints a simple profiling report. If "
"the sort value is specified, it is passed to this :class:`~pstats.Stats` "
"instance to control how the results are sorted."
msgstr ""

#: ../../library/profile.rst:233
msgid ""
"This function is similar to :func:`run`, with added arguments to supply "
"the globals and locals dictionaries for the *command* string. This "
"routine executes::"
msgstr ""

#: ../../library/profile.rst:239
msgid "and gathers profiling statistics as in the :func:`run` function above."
msgstr ""

#: ../../library/profile.rst:243
msgid ""
"This class is normally only used if more precise control over profiling "
"is needed than what the :func:`cProfile.run` function provides."
msgstr ""

#: ../../library/profile.rst:246
msgid ""
"A custom timer can be supplied for measuring how long code takes to run "
"via the *timer* argument. This must be a function that returns a single "
"number representing the current time. If the number is an integer, the "
"*timeunit* specifies a multiplier that specifies the duration of each "
"unit of time. For example, if the timer returns times measured in "
"thousands of seconds, the time unit would be ``.001``."
msgstr ""

#: ../../library/profile.rst:253
msgid ""
"Directly using the :class:`Profile` class allows formatting profile "
"results without writing the profile data to a file::"
msgstr ""

#: ../../library/profile.rst:268
msgid ""
"The :class:`Profile` class can also be used as a context manager "
"(supported only in :mod:`cProfile` module. see "
":ref:`typecontextmanager`)::"
msgstr ""

#: ../../library/profile.rst:278
msgid "Added context manager support."
msgstr "添加了上下文管理器支持。"

#: ../../library/profile.rst:283
msgid "Start collecting profiling data. Only in :mod:`cProfile`."
msgstr "开始收集分析数据。仅在 :mod:`cProfile` 可用。"

#: ../../library/profile.rst:287
msgid "Stop collecting profiling data. Only in :mod:`cProfile`."
msgstr "停止收集分析数据。仅在 :mod:`cProfile` 可用。"

#: ../../library/profile.rst:291
msgid ""
"Stop collecting profiling data and record the results internally as the "
"current profile."
msgstr "停止收集分析数据，并在内部将结果记录为当前 profile。"

#: ../../library/profile.rst:296
msgid ""
"Create a :class:`~pstats.Stats` object based on the current profile and "
"print the results to stdout."
msgstr ""

#: ../../library/profile.rst:301
msgid "Write the results of the current profile to *filename*."
msgstr "将当前profile 的结果写入 *filename* 。"

#: ../../library/profile.rst:305
msgid "Profile the cmd via :func:`exec`."
msgstr ""

#: ../../library/profile.rst:309
msgid ""
"Profile the cmd via :func:`exec` with the specified global and local "
"environment."
msgstr ""

#: ../../library/profile.rst:314
msgid "Profile ``func(*args, **kwargs)``"
msgstr ""

#: ../../library/profile.rst:316
msgid ""
"Note that profiling will only work if the called command/function "
"actually returns.  If the interpreter is terminated (e.g. via a "
":func:`sys.exit` call during the called command/function execution) no "
"profiling results will be printed."
msgstr ""

#: ../../library/profile.rst:324
msgid "The :class:`Stats` Class"
msgstr ":class:`Stats` 类"

#: ../../library/profile.rst:326
msgid ""
"Analysis of the profiler data is done using the :class:`~pstats.Stats` "
"class."
msgstr ""

#: ../../library/profile.rst:333
msgid ""
"This class constructor creates an instance of a \"statistics object\" "
"from a *filename* (or list of filenames) or from a :class:`Profile` "
"instance. Output will be printed to the stream specified by *stream*."
msgstr ""

#: ../../library/profile.rst:337
msgid ""
"The file selected by the above constructor must have been created by the "
"corresponding version of :mod:`profile` or :mod:`cProfile`.  To be "
"specific, there is *no* file compatibility guaranteed with future "
"versions of this profiler, and there is no compatibility with files "
"produced by other profilers, or the same profiler run on a different "
"operating system.  If several files are provided, all the statistics for "
"identical functions will be coalesced, so that an overall view of several"
" processes can be considered in a single report.  If additional files "
"need to be combined with data in an existing :class:`~pstats.Stats` "
"object, the :meth:`~pstats.Stats.add` method can be used."
msgstr ""

#: ../../library/profile.rst:348
msgid ""
"Instead of reading the profile data from a file, a "
":class:`cProfile.Profile` or :class:`profile.Profile` object can be used "
"as the profile data source."
msgstr ""

#: ../../library/profile.rst:351
msgid ":class:`Stats` objects have the following methods:"
msgstr ":class:`Stats` 对象有以下方法:"

#: ../../library/profile.rst:355
msgid ""
"This method for the :class:`Stats` class removes all leading path "
"information from file names.  It is very useful in reducing the size of "
"the printout to fit within (close to) 80 columns.  This method modifies "
"the object, and the stripped information is lost.  After performing a "
"strip operation, the object is considered to have its entries in a "
"\"random\" order, as it was just after object initialization and loading."
" If :meth:`~pstats.Stats.strip_dirs` causes two function names to be "
"indistinguishable (they are on the same line of the same filename, and "
"have the same function name), then the statistics for these two entries "
"are accumulated into a single entry."
msgstr ""

#: ../../library/profile.rst:369
msgid ""
"This method of the :class:`Stats` class accumulates additional profiling "
"information into the current profiling object.  Its arguments should "
"refer to filenames created by the corresponding version of "
":func:`profile.run` or :func:`cProfile.run`. Statistics for identically "
"named (re: file, line, name) functions are automatically accumulated into"
" single function statistics."
msgstr ""

#: ../../library/profile.rst:379
msgid ""
"Save the data loaded into the :class:`Stats` object to a file named "
"*filename*.  The file is created if it does not exist, and is overwritten"
" if it already exists.  This is equivalent to the method of the same name"
" on the :class:`profile.Profile` and :class:`cProfile.Profile` classes."
msgstr ""

#: ../../library/profile.rst:387
msgid ""
"This method modifies the :class:`Stats` object by sorting it according to"
" the supplied criteria.  The argument can be either a string or a SortKey"
" enum identifying the basis of a sort (example: ``'time'``, ``'name'``, "
"``SortKey.TIME`` or ``SortKey.NAME``). The SortKey enums argument have "
"advantage over the string argument in that it is more robust and less "
"error prone."
msgstr ""

#: ../../library/profile.rst:394
msgid ""
"When more than one key is provided, then additional keys are used as "
"secondary criteria when there is equality in all keys selected before "
"them.  For example, ``sort_stats(SortKey.NAME, SortKey.FILE)`` will sort "
"all the entries according to their function name, and resolve all ties "
"(identical function names) by sorting by file name."
msgstr ""

#: ../../library/profile.rst:400
msgid ""
"For the string argument, abbreviations can be used for any key names, as "
"long as the abbreviation is unambiguous."
msgstr ""

#: ../../library/profile.rst:403
msgid "The following are the valid string and SortKey:"
msgstr ""

#: ../../library/profile.rst:406
msgid "Valid String Arg"
msgstr "有效字符串参数"

#: ../../library/profile.rst:406
msgid "Valid enum Arg"
msgstr "有效枚举参数"

#: ../../library/profile.rst:406
msgid "Meaning"
msgstr "含意"

#: ../../library/profile.rst:408
msgid "``'calls'``"
msgstr "``'calls'``"

#: ../../library/profile.rst:408
msgid "SortKey.CALLS"
msgstr "SortKey.CALLS"

#: ../../library/profile.rst:408 ../../library/profile.rst:420
msgid "call count"
msgstr "调用次数"

#: ../../library/profile.rst:410
msgid "``'cumulative'``"
msgstr "``'cumulative'``"

#: ../../library/profile.rst:410
msgid "SortKey.CUMULATIVE"
msgstr "SortKey.CUMULATIVE"

#: ../../library/profile.rst:410 ../../library/profile.rst:412
msgid "cumulative time"
msgstr "累积时间"

#: ../../library/profile.rst:412
msgid "``'cumtime'``"
msgstr "``'cumtime'``"

#: ../../library/profile.rst:412 ../../library/profile.rst:414
#: ../../library/profile.rst:418 ../../library/profile.rst:420
#: ../../library/profile.rst:434
msgid "N/A"
msgstr "N/A"

#: ../../library/profile.rst:414
msgid "``'file'``"
msgstr "``'file'``"

#: ../../library/profile.rst:414 ../../library/profile.rst:416
#: ../../library/profile.rst:418
msgid "file name"
msgstr "文件名"

#: ../../library/profile.rst:416
msgid "``'filename'``"
msgstr "``'filename'``"

#: ../../library/profile.rst:416
msgid "SortKey.FILENAME"
msgstr "SortKey.FILENAME"

#: ../../library/profile.rst:418
msgid "``'module'``"
msgstr "``'module'``"

#: ../../library/profile.rst:420
msgid "``'ncalls'``"
msgstr "``'ncalls'``"

#: ../../library/profile.rst:422
msgid "``'pcalls'``"
msgstr "``'pcalls'``"

#: ../../library/profile.rst:422
msgid "SortKey.PCALLS"
msgstr "SortKey.PCALLS"

#: ../../library/profile.rst:422
msgid "primitive call count"
msgstr "原始调用计数"

#: ../../library/profile.rst:424
msgid "``'line'``"
msgstr "``'line'``"

#: ../../library/profile.rst:424
msgid "SortKey.LINE"
msgstr "SortKey.LINE"

#: ../../library/profile.rst:424
msgid "line number"
msgstr "行号"

#: ../../library/profile.rst:426
msgid "``'name'``"
msgstr "``'name'``"

#: ../../library/profile.rst:426
msgid "SortKey.NAME"
msgstr "SortKey.NAME"

#: ../../library/profile.rst:426
msgid "function name"
msgstr "函数名称"

#: ../../library/profile.rst:428
msgid "``'nfl'``"
msgstr "``'nfl'``"

#: ../../library/profile.rst:428
msgid "SortKey.NFL"
msgstr "SortKey.NFL"

#: ../../library/profile.rst:428
msgid "name/file/line"
msgstr "名称/文件/行"

#: ../../library/profile.rst:430
msgid "``'stdname'``"
msgstr "``'stdname'``"

#: ../../library/profile.rst:430
msgid "SortKey.STDNAME"
msgstr "SortKey.STDNAME"

#: ../../library/profile.rst:430
msgid "standard name"
msgstr "标准名称"

#: ../../library/profile.rst:432
msgid "``'time'``"
msgstr "``'time'``"

#: ../../library/profile.rst:432
msgid "SortKey.TIME"
msgstr "SortKey.TIME"

#: ../../library/profile.rst:432 ../../library/profile.rst:434
msgid "internal time"
msgstr "内部时间"

#: ../../library/profile.rst:434
msgid "``'tottime'``"
msgstr "``'tottime'``"

#: ../../library/profile.rst:437
msgid ""
"Note that all sorts on statistics are in descending order (placing most "
"time consuming items first), where as name, file, and line number "
"searches are in ascending order (alphabetical). The subtle distinction "
"between ``SortKey.NFL`` and ``SortKey.STDNAME`` is that the standard name"
" is a sort of the name as printed, which means that the embedded line "
"numbers get compared in an odd way.  For example, lines 3, 20, and 40 "
"would (if the file names were the same) appear in the string order 20, 3 "
"and 40. In contrast, ``SortKey.NFL`` does a numeric compare of the line "
"numbers. In fact, ``sort_stats(SortKey.NFL)`` is the same as "
"``sort_stats(SortKey.NAME, SortKey.FILENAME, SortKey.LINE)``."
msgstr ""

#: ../../library/profile.rst:448
msgid ""
"For backward-compatibility reasons, the numeric arguments ``-1``, ``0``, "
"``1``, and ``2`` are permitted.  They are interpreted as ``'stdname'``, "
"``'calls'``, ``'time'``, and ``'cumulative'`` respectively.  If this old "
"style format (numeric) is used, only one sort key (the numeric key) will "
"be used, and additional arguments will be silently ignored."
msgstr ""

#: ../../library/profile.rst:456
msgid "Added the SortKey enum."
msgstr ""

#: ../../library/profile.rst:461
msgid ""
"This method for the :class:`Stats` class reverses the ordering of the "
"basic list within the object.  Note that by default ascending vs "
"descending order is properly selected based on the sort key of choice."
msgstr ""

#: ../../library/profile.rst:471
msgid ""
"This method for the :class:`Stats` class prints out a report as described"
" in the :func:`profile.run` definition."
msgstr ""

#: ../../library/profile.rst:474
msgid ""
"The order of the printing is based on the last "
":meth:`~pstats.Stats.sort_stats` operation done on the object (subject to"
" caveats in :meth:`~pstats.Stats.add` and "
":meth:`~pstats.Stats.strip_dirs`)."
msgstr ""

#: ../../library/profile.rst:479
msgid ""
"The arguments provided (if any) can be used to limit the list down to the"
" significant entries.  Initially, the list is taken to be the complete "
"set of profiled functions.  Each restriction is either an integer (to "
"select a count of lines), or a decimal fraction between 0.0 and 1.0 "
"inclusive (to select a percentage of lines), or a string that will "
"interpreted as a regular expression (to pattern match the standard name "
"that is printed). If several restrictions are provided, then they are "
"applied sequentially. For example::"
msgstr ""

#: ../../library/profile.rst:490
#, python-format
msgid ""
"would first limit the printing to first 10% of list, and then only print "
"functions that were part of filename :file:`.\\*foo:`.  In contrast, the "
"command::"
msgstr ""

#: ../../library/profile.rst:496
#, python-format
msgid ""
"would limit the list to all functions having file names :file:`.\\*foo:`,"
" and then proceed to only print the first 10% of them."
msgstr ""

#: ../../library/profile.rst:502
msgid ""
"This method for the :class:`Stats` class prints a list of all functions "
"that called each function in the profiled database.  The ordering is "
"identical to that provided by :meth:`~pstats.Stats.print_stats`, and the "
"definition of the restricting argument is also identical.  Each caller is"
" reported on its own line.  The format differs slightly depending on the "
"profiler that produced the stats:"
msgstr ""

#: ../../library/profile.rst:509
msgid ""
"With :mod:`profile`, a number is shown in parentheses after each caller "
"to show how many times this specific call was made.  For convenience, a "
"second non-parenthesized number repeats the cumulative time spent in the "
"function at the right."
msgstr ""

#: ../../library/profile.rst:514
msgid ""
"With :mod:`cProfile`, each caller is preceded by three numbers: the "
"number of times this specific call was made, and the total and cumulative"
" times spent in the current function while it was invoked by this "
"specific caller."
msgstr ""

#: ../../library/profile.rst:522
msgid ""
"This method for the :class:`Stats` class prints a list of all function "
"that were called by the indicated function.  Aside from this reversal of "
"direction of calls (re: called vs was called by), the arguments and "
"ordering are identical to the :meth:`~pstats.Stats.print_callers` method."
msgstr ""

#: ../../library/profile.rst:530
msgid ""
"This method returns an instance of StatsProfile, which contains a mapping"
" of function names to instances of FunctionProfile. Each FunctionProfile "
"instance holds information related to the function's profile such as how "
"long the function took to run, how many times it was called, etc..."
msgstr ""

#: ../../library/profile.rst:535
msgid ""
"Added the following dataclasses: StatsProfile, FunctionProfile. Added the"
" following function: get_stats_profile."
msgstr ""

#: ../../library/profile.rst:542
msgid "What Is Deterministic Profiling?"
msgstr "什么是确定性性能分析？"

#: ../../library/profile.rst:544
msgid ""
":dfn:`Deterministic profiling` is meant to reflect the fact that all "
"*function call*, *function return*, and *exception* events are monitored,"
" and precise timings are made for the intervals between these events "
"(during which time the user's code is executing).  In contrast, "
":dfn:`statistical profiling` (which is not done by this module) randomly "
"samples the effective instruction pointer, and deduces where time is "
"being spent.  The latter technique traditionally involves less overhead "
"(as the code does not need to be instrumented), but provides only "
"relative indications of where time is being spent."
msgstr ""
":dfn:`确定性性能分析` 旨在反映这样一个事实：即所有 *函数调用* 、 *函数返回* 和 *异常* "
"事件都被监控，并且对这些事件之间的间隔（在此期间用户的代码正在执行）进行精确计时。相反，统计分析（不是由该模块完成）随机采样有效指令指针，并推断时间花费在哪里。后一种技术传统上涉及较少的开销（因为代码不需要检测），但只提供了时间花在哪里的相对指示。"

#: ../../library/profile.rst:553
msgid ""
"In Python, since there is an interpreter active during execution, the "
"presence of instrumented code is not required in order to do "
"deterministic profiling. Python automatically provides a :dfn:`hook` "
"(optional callback) for each event. In addition, the interpreted nature "
"of Python tends to add so much overhead to execution, that deterministic "
"profiling tends to only add small processing overhead in typical "
"applications.  The result is that deterministic profiling is not that "
"expensive, yet provides extensive run time statistics about the execution"
" of a Python program."
msgstr ""
"在Python中，由于在执行过程中总有一个活动的解释器，因此执行确定性评测不需要插入指令的代码。Python "
"自动为每个事件提供一个:dfn:`钩子` （可选回调）。此外，Python "
"的解释特性往往会给执行增加太多开销，以至于在典型的应用程序中，确定性分析往往只会增加很小的处理开销。结果是，确定性分析并没有那么代价高昂，但是它提供了有关"
" Python 程序执行的大量运行时统计信息。"

#: ../../library/profile.rst:562
msgid ""
"Call count statistics can be used to identify bugs in code (surprising "
"counts), and to identify possible inline-expansion points (high call "
"counts).  Internal time statistics can be used to identify \"hot loops\" "
"that should be carefully optimized.  Cumulative time statistics should be"
" used to identify high level errors in the selection of algorithms.  Note"
" that the unusual handling of cumulative times in this profiler allows "
"statistics for recursive implementations of algorithms to be directly "
"compared to iterative implementations."
msgstr ""
"调用计数统计信息可用于识别代码中的错误（意外计数），并识别可能的内联扩展点（高频调用）。内部时间统计可用于识别应仔细优化的 \"热循环\" "
"。累积时间统计可用于识别算法选择上的高级别错误。请注意，该分析器中对累积时间的异常处理，允许直接比较算法的递归实现与迭代实现的统计信息。"

#: ../../library/profile.rst:575
msgid "Limitations"
msgstr "局限性"

#: ../../library/profile.rst:577
msgid ""
"One limitation has to do with accuracy of timing information. There is a "
"fundamental problem with deterministic profilers involving accuracy.  The"
" most obvious restriction is that the underlying \"clock\" is only "
"ticking at a rate (typically) of about .001 seconds.  Hence no "
"measurements will be more accurate than the underlying clock.  If enough "
"measurements are taken, then the \"error\" will tend to average out. "
"Unfortunately, removing this first error induces a second source of "
"error."
msgstr ""
"一个限制是关于时间信息的准确性。确定性性能分析存在一个涉及精度的基本问题。最明显的限制是，底层的 \"时钟\" "
"周期大约为0.001秒（通常）。因此，没有什么测量会比底层时钟更精确。如果进行了足够的测量，那么 \"误差\" "
"将趋于平均。不幸的是，删除第一个错误会导致第二个错误来源。"

#: ../../library/profile.rst:585
msgid ""
"The second problem is that it \"takes a while\" from when an event is "
"dispatched until the profiler's call to get the time actually *gets* the "
"state of the clock.  Similarly, there is a certain lag when exiting the "
"profiler event handler from the time that the clock's value was obtained "
"(and then squirreled away), until the user's code is once again "
"executing.  As a result, functions that are called many times, or call "
"many functions, will typically accumulate this error. The error that "
"accumulates in this fashion is typically less than the accuracy of the "
"clock (less than one clock tick), but it *can* accumulate and become very"
" significant."
msgstr ""
"第二个问题是，从调度事件到分析器调用获取时间函数实际 *获取* 时钟状态，这需要 \"一段时间\" "
"。类似地，从获取时钟值（然后保存）开始，直到再次执行用户代码为止，退出分析器事件句柄时也存在一定的延迟。因此，多次调用单个函数或调用多个函数通常会累积此错误。尽管这种方式的误差通常小于时钟的精度（小于一个时钟周期），但它"
" *可以* 累积并变得非常可观。"

#: ../../library/profile.rst:595
msgid ""
"The problem is more important with :mod:`profile` than with the lower-"
"overhead :mod:`cProfile`.  For this reason, :mod:`profile` provides a "
"means of calibrating itself for a given platform so that this error can "
"be probabilistically (on the average) removed. After the profiler is "
"calibrated, it will be more accurate (in a least square sense), but it "
"will sometimes produce negative numbers (when call counts are "
"exceptionally low, and the gods of probability work against you :-). )  "
"Do *not* be alarmed by negative numbers in the profile.  They should "
"*only* appear if you have calibrated your profiler, and the results are "
"actually better than without calibration."
msgstr ""
"与开销较低的 :mod:`cProfile` 相比， :mod:`profile` 的问题更为严重。出于这个原因， :mod:`profile` "
"提供了一种针对指定平台的自我校准方法，以便可以在很大程度上（平均地）消除此误差。  "
"校准后，结果将更准确（在最小二乘意义上），但它有时会产生负数（当调用计数异常低，且概率之神对您不利时：-）。因此 *不要* "
"对产生的负数感到惊慌。它们应该只在你手工校准分析器的情况下才会出现，实际上结果比没有校准的情况要好。"

#: ../../library/profile.rst:609
msgid "Calibration"
msgstr "准确估量"

#: ../../library/profile.rst:611
msgid ""
"The profiler of the :mod:`profile` module subtracts a constant from each "
"event handling time to compensate for the overhead of calling the time "
"function, and socking away the results.  By default, the constant is 0. "
"The following procedure can be used to obtain a better constant for a "
"given platform (see :ref:`profile-limitations`). ::"
msgstr ""
":mod:`profile` 模块的 profiler 会从每个事件处理时间中减去一个常量，以补偿调用 time "
"函数和存储结果的开销。默认情况下，常数为0。对于特定的平台，可用以下程序获得更好修正常数（ :ref:`profile-limitations` "
"）。"

#: ../../library/profile.rst:622
msgid ""
"The method executes the number of Python calls given by the argument, "
"directly and again under the profiler, measuring the time for both. It "
"then computes the hidden overhead per profiler event, and returns that as"
" a float.  For example, on a 1.8Ghz Intel Core i5 running macOS, and "
"using Python's time.process_time() as the timer, the magical number is "
"about 4.04e-6."
msgstr ""

#: ../../library/profile.rst:628
msgid ""
"The object of this exercise is to get a fairly consistent result. If your"
" computer is *very* fast, or your timer function has poor resolution, you"
" might have to pass 100000, or even 1000000, to get consistent results."
msgstr ""

#: ../../library/profile.rst:632
msgid "When you have a consistent answer, there are three ways you can use it::"
msgstr "当你有一个一致的答案时，有三种方法可以使用："

#: ../../library/profile.rst:646
msgid ""
"If you have a choice, you are better off choosing a smaller constant, and"
" then your results will \"less often\" show up as negative in profile "
"statistics."
msgstr ""

#: ../../library/profile.rst:652
msgid "Using a custom timer"
msgstr "使用自定义计时器"

#: ../../library/profile.rst:654
msgid ""
"If you want to change how current time is determined (for example, to "
"force use of wall-clock time or elapsed process time), pass the timing "
"function you want to the :class:`Profile` class constructor::"
msgstr ""

#: ../../library/profile.rst:660
msgid ""
"The resulting profiler will then call ``your_time_func``. Depending on "
"whether you are using :class:`profile.Profile` or "
":class:`cProfile.Profile`, ``your_time_func``'s return value will be "
"interpreted differently:"
msgstr ""

#: ../../library/profile.rst:678
msgid ":class:`profile.Profile`"
msgstr ":class:`profile.Profile`"

#: ../../library/profile.rst:665
msgid ""
"``your_time_func`` should return a single number, or a list of numbers "
"whose sum is the current time (like what :func:`os.times` returns).  If "
"the function returns a single time number, or the list of returned "
"numbers has length 2, then you will get an especially fast version of the"
" dispatch routine."
msgstr ""

#: ../../library/profile.rst:671
msgid ""
"Be warned that you should calibrate the profiler class for the timer "
"function that you choose (see :ref:`profile-calibration`).  For most "
"machines, a timer that returns a lone integer value will provide the best"
" results in terms of low overhead during profiling.  (:func:`os.times` is"
" *pretty* bad, as it returns a tuple of floating point values).  If you "
"want to substitute a better timer in the cleanest fashion, derive a class"
" and hardwire a replacement dispatch method that best handles your timer "
"call, along with the appropriate calibration constant."
msgstr ""

#: ../../library/profile.rst:692
msgid ":class:`cProfile.Profile`"
msgstr ":class:`cProfile.Profile`"

#: ../../library/profile.rst:681
msgid ""
"``your_time_func`` should return a single number.  If it returns "
"integers, you can also invoke the class constructor with a second "
"argument specifying the real duration of one unit of time.  For example, "
"if ``your_integer_time_func`` returns times measured in thousands of "
"seconds, you would construct the :class:`Profile` instance as follows::"
msgstr ""

#: ../../library/profile.rst:689
msgid ""
"As the :class:`cProfile.Profile` class cannot be calibrated, custom timer"
" functions should be used with care and should be as fast as possible.  "
"For the best results with a custom timer, it might be necessary to hard-"
"code it in the C source of the internal :mod:`_lsprof` module."
msgstr ""

#: ../../library/profile.rst:694
msgid ""
"Python 3.3 adds several new functions in :mod:`time` that can be used to "
"make precise measurements of process or wall-clock time. For example, see"
" :func:`time.perf_counter`."
msgstr ""

#~ msgid ""
#~ "The method executes the number of "
#~ "Python calls given by the argument, "
#~ "directly and again under the profiler,"
#~ " measuring the time for both. It "
#~ "then computes the hidden overhead per"
#~ " profiler event, and returns that as"
#~ " a float.  For example, on a "
#~ "1.8Ghz Intel Core i5 running Mac "
#~ "OS X, and using Python's "
#~ "time.process_time() as the timer, the "
#~ "magical number is about 4.04e-6."
#~ msgstr ""

